//6,7,11,12   //bst with mirror


#include<iostream>
using namespace std;

typedef struct tnode
{
     int data;
     struct tnode*left;
     struct tnode*right;
}tnode;

typedef struct node
{
   struct tnode*x;
   struct node *next;
}node;


class queue
{
   node *front,*rear;
   public:
queue()
{
   front=NULL;
   rear=NULL;
}

int isempty()
{
      if(front==NULL)
      return 1;
   return 0;
}
void enque(tnode *i)
{
   node *p;
   p=new node();
   p->x=i;
   p->next=NULL;
   
   if(front==NULL)
   {
     front=p;
     rear=p;
   }
   else
   {
     rear->next=p;
     rear=rear->next;
   }
}
tnode *deque()
{
  node *p;
  tnode *temp;
  p=front;
  temp=front->x;
  if(front==rear)
  {
     front=NULL;
     rear=NULL;
  }
  else
  {
     front=front->next;
  }
  delete p;
  return temp;
}
};



class tree
{
tnode *t;
public:
tree()
{
t=NULL;
}
tnode *insert(int x)
{
    tnode *p,*q,*r;
    
    p=new tnode();
    p->data=x;
    p->left=NULL;
    p->right=NULL;
    
    if(t==NULL)
    return p;
    
    q=t;
    r=t;
while(r!=NULL)
{
    q=r;
    if(x<r->data)
    r=r->left;
    else
    r=r->right;
}
    if(x<q->data)
    q->left=p;
    else
    q->right=p;

    return t;
}

tnode *create()
{
int n,i,key;
cout<<" \n Enter the number of nodes - ";
cin>>n;
for(i=0;i<n;i++)
{
cout<<" \n Enter the data -";
cin>>key;
t=insert(key);
}
return t;
}
void inorder(tnode *t)
{
if(t!=NULL)
{
inorder(t->left);
cout<<"\t"<<t->data;
inorder(t->right);
}
}

tnode* search(int key)
{ 
tnode *s=t;
while(s!=NULL)
{
if(s->data==key)
return t;
else if(s->data<key)
s=s->right;
else
s=s->left;

}
return NULL;
}

tnode *del(tnode *t,int key)
{
   tnode *temp;
   if(t==NULL)
   { 
     return NULL; 
   }
   if(key<t->data)
   {
     t->left=del(t->left,key);
     return t;
   }
   if(key>t->data)
   {
     t->right=del(t->right,key);
     return t;
   }
//element found
//no child
   if(t->left==NULL&t->right==NULL)
   { 
     temp=t;
     delete temp;
     return NULL;
   }
//one child
   if(t->left!=NULL&&t->right==NULL)
   {
     temp=t;
     t=t->left;
     delete temp;
     return t;
   }
   if(t->left==NULL&&t->right!=NULL)
   {
     temp=t;
     t=t->right;
     delete temp;
     return t;
   }
//both child present
}






tnode *mirror(tnode *t)
{
tnode *temp;
if(t==NULL)
{
return NULL;
}
temp=t->left;
t->left=mirror(t->right);
t->right=mirror(temp);
return t;
}





};

int main()
{   
     int choice,key;
     tnode *root,*result;
     tree t;
     do
     {
      cout<<" \n Main menu "
            "\n 1.Create "
            "\n 2.Insert "
            "\n 3.Display "
            "\n 4.Search "
            "\n 5.Delete "
            "\n 6.Mirror image "
            "\n 7.Exit \n Enter your choice - ";
      cin>>choice;
     switch(choice)
     {
      case 1:root=t.create();
                 break;
      case 2:cout<<"\n Enter the number to insert - ";
             cin>>key; 
             root=t.insert(key);
             break;
      case 3:cout<<"Binary tree :-";
             t.inorder(root);
                 break;
      case 4:cout<<" \n Enter the node to search -";
                 cin>>key;
                 result=t.search(key);
                 if(result==NULL)
                 { 
                 cout<<"\n Element "<<key<<" not present"<<endl;
                 }
                 else
                 {
                 cout<<"\n Element "<<key<<" is present"<<endl;
                 }
                 break;
      case 5:cout<<"\n Enter the node to delete -";
             cin>>key;
             result=t.del(root,key);
             root=result;
             cout<<"\n Element deleted successfully!!"<<endl;    
         
             break;
      case 6:root=t.mirror(root);
             cout<<"\n Mirror image of the binary tree is :-"<<endl;
             t.inorder(root);
                 break;
           
     
     
      case 7:return 0;
      default:cout<<"\n Invalid choice !! Please enter your choice again."<<endl;
     } 
     }while(choice!=7);
}