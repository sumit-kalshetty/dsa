//17,13  //max heap min heap
#include <iostream>
using namespace std;
void MaxHeapify(int a[], int i, int n)
{int j, temp;
	temp = a[i];
	j = 2*i;
 	while (j <= n)
	{
        if (j < n && a[j+1] > a[j])
		j = j+1;
		if (temp > a[j])
			break;
		else if (temp <= a[j])
		{a[j/2] = a[j];
			j = 2*j;
	}
	}
	a[j/2] = temp;
	return;
}
void Build_MaxHeap(int a[], int n)
{int i;
	for(i = n/2; i >= 1; i--)
		MaxHeapify(a, i, n);
}
void Max_HeapSort(int a[], int n)
{int i, temp;
	for (i = n; i >= 2; i--)
	{temp = a[i];
		a[i] = a[1];
		a[1] = temp;
		MaxHeapify(a, 1, i - 1);
	}
}
void min_heapify(int a[],int i,int n)
{  int j, temp;
    temp = a[i];
    j = 2 * i;
    while (j <= n)
    {  if (j < n && a[j+1] < a[j])
            j = j + 1;
        if (temp < a[j])
            break;
        else if (temp >= a[j])
        { a[j/2] = a[j];
            j = 2 * j;
        }
    }
    a[j/2] = temp;
    return;
}
void build_minheap(int a[], int n)
{  int i;
    for(i = n/2; i >= 1; i--)
    { min_heapify(a,i,n);
    }
}
void Min_HeapSort(int a[], int n)
{
	int i, temp;
	for (i = n; i >= 2; i--)
	{temp = a[i];
		a[i] = a[1];
		a[1] = temp;
		min_heapify(a, 1, i - 1);
	}
}
void print(int arr[], int n)
{cout<<"\nSorted Data ";
	for (int i = 1; i <=n; i++)
		cout<<"->"<<arr[i];
 	return;
}
int main()
{int n, i, ch;
	cout<<"\nEnter the number of data element to be sorted: ";
	cin>>n;
	int arr[n];
	for(i = 1; i <=n; i++)
	{cout<<"Enter element "<<i<<": ";
		cin>>arr[i];
	}
do
{	cout<<"\n1. Heap sort using  max heap";
cout<<"\n2. Heap sort using  min heap";
cout<<"\n 3. exit";
cout<<"\nenter your choice:";
cin>>ch;
switch(ch)
{case 1:	Build_MaxHeap(arr, n);
     	Max_HeapSort(arr, n);
       print(arr, n);
       break;	
case 2:	build_minheap(arr, n);
     	Min_HeapSort(arr, n);
        print(arr, n);
        break;	
case 3:return 0;
      default:cout<<"\n Invalid choice !! Please enter your choice again."<<endl;		
}
}
while(ch!=3);	}	








//18
//Kruskal
#include<iostream>
using namespace std;
class MST
{
int a[20][20],n,k;
struct gr
{
int v1;
int v2;
int wt;
}g[20];
public:
void accept();
void extract_edges();
void kruskal();
};
void MST::accept()
{
int i,j;
    cout<<"\nEnter the no. of vertices: ";
        cin>>n;
cout<<"Enter adjacency matrix:\n";
        for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
cin>>a[i][j];
}
void MST::extract_edges()
{
int i,j;
for(i=1,k=0;i<=n;i++)
for(j=i+1;j<=n;j++)
if(a[i][j]!=0 )
{
g[k].v1=i;
g[k].v2=j;
g[k++].wt=a[i][j];
}
cout<<"\tSource\tSink\tWeight\n";
  for(i=0;i<k;i++)
cout<<"\t"<<g[i].v1<<"\t"<<g[i].v2<<"\t"<<g[i].wt<<"\n";
}
void MST::kruskal()
{
gr temp,tree[20];
int i,j,father[20]={0},sum=0,n1,n2,r1,r2;
for(i=0;i<k;i++)
{
        for(j=0;j<k-1;j++)
{
if(g[j].wt>g[j+1].wt)
                        {
                        temp=g[j+1];
    g[j+1]=g[j];
g[j]=temp;
                    }
}
}
cout<<"\tSource\tSink\tWeight\n";
for(i=0;i<k;i++)
cout<<"\t"<<g[i].v1<<"\t"<<g[i].v2<<"\t"<<g[i].wt<<"\n";
for(i=0,j=0;i<k && j<n-1;i++)
{
n1=g[i].v1;
n2=g[i].v2;

while(n1>0)
{
r1=n1;
n1=father[n1];
}

while(n2>0)
{
r2=n2;
n2=father[n2];
}

if(r1!=r2)
{
tree[j].v1=g[i].v1;
tree[j].v2=g[i].v2;
tree[j++].wt=g[i].wt;
sum+=g[i].wt;
father[r2]=r1;
}
}
cout<<"\nEdges in MST:\n\tSource\tSink\tWeight\n";
for(i=0;i<j;i++)
cout<<"\t"<<tree[i].v1<<"\t"<<tree[i].v2<<"\t"<<tree[i].wt<<"\n";
cout<<"Total cost of MST: "<<sum<<"\n";
}
 
 

